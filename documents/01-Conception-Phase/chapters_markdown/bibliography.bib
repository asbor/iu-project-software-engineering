@online{PythonTestingInVisualStudioCode,
    auther          = {Visual Studio Code},
    title           = {Python testing in Visual Studio Code},
    organization    = {Visual Studio Code},
    date            = {01-03-2023},
    urldate         = {20-01-2023},
    url             = {https://code.visualstudio.com/docs/python/testing},
    keywords        = {Python, testing, Visual Studio Code, unit testing}
}

@inproceedings{Cockburn2000WritingEU,
    title           = {Writing Effective Use Cases},
    author          = {Alistair Cockburn},
    year            = {2000}
}

@inproceedings{Cockburn2000StructuringUC,
    title           = {Structuring Use Cases with Goals},
    author          = {Alistair Cockburn},
    year            = {2000}
}

@book{AddisonWesley2007,
    author          = {Booch, Grady and Maksimchuk, Robert and Engle, Michael and Young, Bobbi and Conallen, Jim and Houston, Kelli},
    title           = {Object-Oriented Analysis and Design with Applications, Third Edition},
    year            = {2007},
    isbn            = {9780201895513},
    publisher       = {Addison-Wesley Professional},
    edition         = {Third},
    abstract        = {Object-Oriented Design with Applications has long been the essential reference to object-oriented technology, which, in turn, has evolved to join the mainstream of industrial-strength software development. In this third edition--the first revision in 13 years--readers can learn to apply object-oriented methods using new paradigms such as Java, the Unified Modeling Language (UML) 2.0, and .NET.The authors draw upon their rich and varied experience to offer improved methods for object development and numerous examples that tackle the complex problems faced by software engineers, including systems architecture, data acquisition, cryptoanalysis, control systems, and Web development. They illustrate essential concepts, explain the method, and show successful applications in a variety of fields. You'll also find pragmatic advice on a host of issues, including classification, implementation strategies, and cost-effective project management.New to this new edition are An introduction to the new UML 2.0, from the notation's most fundamental and advanced elements with an emphasis on key changes New domains and contexts A greatly enhanced focus on modeling--as eagerly requested by readers--with five chapters that each delve into one phase of the overall development lifecycle. Fresh approaches to reasoning about complex systems An examination of the conceptual foundation of the widely misunderstood fundamental elements of the object model, such as abstraction, encapsulation, modularity, and hierarchy How to allocate the resources of a team of developers and mange the risks associated with developing complex software systems An appendix on object-oriented programming languagesThis is the seminal text for anyone who wishes to use object-oriented technology to manage the complexity inherent in many kinds of systems.Sidebars\"{\i} \"{\i} Preface\"{\i} Acknowledgments \"{\i} \"{\i} About the Authors \"{\i} \"{\i} Section I: Concepts\"{\i} \"{\i} Chapter 1: Complexity\"{\i} \"{\i} \"{\i} Chapter 2: The Object Model \"{\i} \"{\i} Chapter 3: Classes and Objects \"{\i} \"{\i} Chapter 4: Classification \"{\i} \"{\i} Section II: Method \"{\i} Chapter 5: Notation \"{\i} \"{\i} Chapter 6: Process Chapter 7: Pragmatics\"{\i} \"{\i} \"{\i} Chapter 8: System Architecture: Satellite-Based Navigation \"{\i} \"{\i} Chapter 9: Control System: Traffic Management \"{\i} \"{\i} Chapter 10: Artificial Intelligence: Cryptanalysis \"{\i} \"{\i} Chapter 11: Data Acquisition: Weather Monitoring Station \"{\i} Chapter 12: Web Application: Vacation Tracking System \"{\i} \"{\i} \"{\i} Appendix A: Object-Oriented Programming Languages\"{\i} Appendix B: Further Reading \"{\i} \"{\i} Notes \"{\i} \"{\i} Glossary \"{\i} \"{\i} Classified Bibliography \"{\i} \"{\i} Index \"{\i} \"{\i}}
}

@misc{vranic-2022,
	author          = {given=Valentino, family=Vranić},
	month           = {9},
	title           = {{Object Oriented Programing 2023}},
	year            = {2023},
	url             = {http://www2.fiit.stuba.sk/oop/index_en.html},
}

@misc{sparxsystems-2022,
	author          = {Sparxsystems},
	month           = {},
	title           = {Use Case},
	year            = {2022},
	url             = {https://sparxsystems.com/enterprise_architect_user_guide/16.0/modeling_languages/usecase.html},
}

@misc{uml-diagrams-2022,
	author          = {uml-diagrams.org},
	month           = {},
	title           = {UML Class Diagrams Examples},
	year            = {2022},
	url             = {https://www.uml-diagrams.org/class-diagrams-examples.html},
}

@online{Brewfather,
    auther          = {Brewfather},
    title           = {Brewfather},
    organization    = {Brewfather},
    date            = {01-03-2023},
    urldate         = {20-01-2023},
    url             = {https://web.brewfather.app/},
    keywords        = {Brewing, Brewfather, beer, brewing software}
}

@online{Beersmith,
    auther          = {Beersmith},
    title           = {Beersmith},
    organization    = {Beersmith},
    date            = {01-03-2023},
    urldate         = {20-01-2023},
    url             = {https://beersmith.com/},
    keywords        = {Brewing, Beersmith, beer, brewing software}
}

@book{UML@Classroom,
    author          = {Martina Seidl and Marion Scholz and Christian Huemer and Gerti Kappel},
    title           = {UML@Classroom},
    year            = {2015},
    isbn            = {978-3-319-12742-2},
    publisher       = {Springer International Publishing},
    abstract        = {This textbook mainly addresses beginners and readers with a basic knowledge of object-oriented programming languages like Java or C#, but with little or no modeling or software engineering experience – thus reflecting the majority of students in introductory courses at universities. Using UML, it introduces basic modeling concepts in a highly precise manner, while refraining from the interpretation of rare special cases. It presents a simple process for object-oriented software development, which is soundly based on traditional software engineering principles and on the object-oriented paradigm. The textbook is made accessible to students by a clear and precise writing style and by the authors’ use of a simple, accessible notation. It gives examples in both Java and C# to teach and apply UML, and, as the title suggests, it uses the object-oriented paradigm throughout. For lecturers and teachers both the book and the additional exercises offered on the authors' website are a valuable and time-saving support for their teaching activities.}
}

@book{ApplyingUMLandPatterns,
    author          = {Craig Larman},
    title           = {Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development},
    year            = {2004},
    isbn            = {0-13-148906-2},
    publisher       = {Prentice Hall},
    abstract        = {Applying UML and Patterns is the world’s #1 business and college introduction to “thinking in objects”—and using that insight in real-world object-oriented analysis and design. Building on two widely acclaimed previous editions, Craig Larman has updated this book to fully reflect the new UML 2 standard, to help you master the art of object design, and to promote high-impact, iterative, and skillful agile modeling practices. Developers and students will learn object-oriented analysis and design (OOA/D) through three iterations of two cohesive, start-to-finish case studies. These case studies incrementally introduce key skills, essential OO principles and patterns, UML notation, and best practices. You won’t just learn UML diagrams—you’ll learn how to apply UML in the context of OO software development. Drawing on his unsurpassed experience as a mentor and consultant, Larman helps you understand evolutionary requirements and use cases, domain object modeling, responsibility-driven design, essential OO design, layered architectures, “Gang of Four” design patterns, GRASP, iterative methods, an agile approach to the Unified Process (UP), and much more. This edition’s extensive improvements include A stronger focus on helping you master OOA/D through case studies that demonstrate key OO principles and patterns, while also applying the UML A new chapter on evolutionary requirements, and two expanded chapters on iterative methods and processes A new chapter on the UP and iterative and agile approaches for unified modeling More real-world examples for “dive-in” learning, and more complex examples that show how to apply UML and patterns Dozens of new, challenging exercises along with solutions New OOA/D patterns and diagrams A new, start-to-finish case study The latest version of the industry’s leading OOA/D website www.craiglarman.com}
}

